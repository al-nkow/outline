import React, { Component } from 'react';
import { tomorrow } from 'react-syntax-highlighter/styles/prism';

import Important from '../components/Important';
import { Head, SubHead, StyledSyntaxHighlighter } from '../components/shared';

const code1 = `var socket = new WebSocket("ws://javascript.ru/ws");
`;

class ApiPage extends Component {
  render () {
    return (
      <div>
        <Head>Application Programming Interface (API)</Head>
        <p>
          Позволяет компонентам ПО взаимодействовать между собой
        </p>
        <Important>
          Браузер предоставляет библиотеки и объекты, которые позволяют Вам
          контролировать web страницу
        </Important>
        <p>
          - Добавлять, удалять и изменять элементы страницы<br/>
          - Move, resize, transform elements<br/>
          - Управлять формами и инпутами<br/>
          - Валидировать формы перед отправкой на сервер<br/>
          - Делать запросы на сервер (ajax)<br/>
          - Хранение данных (cookies, local storage, session storage)<br/>
          - HTML5: audio, video, canvas, location<br/>
          - Javascript shims (позволяет разным фичам работать в разных
          браузерах если где-то не поддерживается)
        </p>
        <Important>
          Browser API's это НЕ Javascript! это только библиотеки и не являются языком
        </Important>
        <p>API обычно используют JSON как главный язык</p>

        <SubHead>Http Request Function</SubHead>
        <p>
          Старая версия: XMLHttpRequest (HTTP(s): GET, POST, PUT, DELETE)<br/>
          <b>В новой версии уже есть:</b><br/>
          бинарные файлы и данные<br/>
          поддержка html форм (объект FormData)<br/>
          кросс-доменные запросы (CORS)<br/>
          события о процессе загрузки<br/>
        </p>

        <SubHead>Fetch</SubHead>
        <p>
          Метод fetch – это XMLHttpRequest нового поколения. Он предоставляет улучшенный
          интерфейс для осуществления запросов к серверу: как по части возможностей и
          контроля над происходящим, так и по синтаксису, так как построен на промисах.
        </p>

        <SubHead>Websocket</SubHead>
        <p>
          Он позволяет пересылать любые данные, на любой домен, безопасно и почти без
          лишнего сетевого трафика.
        </p>
        <StyledSyntaxHighlighter language='javascript' style={tomorrow}>
          {code1}
        </StyledSyntaxHighlighter>
        <p>
          У объекта socket есть четыре коллбэка: один при получении данных и три – при
          изменениях в состоянии соединения: socket.onopen, socket.onclose, socket.onmessage,
          socket.onerror.
        </p>
        <p>
          Соединение WebSocket можно открывать как WS:// или как WSS://. Протокол WSS
          представляет собой WebSocket над HTTPS.
        </p>

        <SubHead>Server Side Events (SSE)</SubHead>
        <p>
          Современный стандарт <b>Server-Sent Events</b> позволяет браузеру создавать специальный
          объект EventSource, который сам обеспечивает соединение с сервером, делает
          пересоединение в случае обрыва и генерирует события при поступлении данных.
          Он, по дизайну, может меньше, чем WebSocket’ы.
          С другой стороны, Server Side Events проще в реализации, работают по обычному
          протоколу HTTP и сразу поддерживают ряд возможностей, которые для WebSocket
          ещё надо реализовать.
          Поэтому в тех случаях, когда нужна преимущественно односторонняя передача
          данных от сервера к браузеру, они могут быть удачным выбором.
        </p>

        <SubHead>WEB RTC</SubHead>
        <p>
          Это API для двунаправленной передачи текста и бинарного медиа напрямую между клиентами.
          - онлайн игры<br/>
          - обмен данными, которые важны клиенту, но не важны серверу<br/>
          - сделать лучший скайп
        </p>

        <SubHead>HTTP протокол</SubHead>
        <p>
          Протокол для передачи гипертекстовых документов (в 1ю очередь для html документов).
          Состоит из запроса и ответа, после этого соединение следует закрыть.
        </p>
        <p>
          Методы:<br/>
          <b>GET</b> - получение документа<br/>
          <b>HEAD</b> - получение только заголовков<br/>
          <b>POST</b> - отправка данных на сервер<br/>
          <b>PUT</b> - отправка документа на сервер<br/>
          <b>DELETE</b> - удаление документа<br/>
          <b>CONNECT, TRACE, OPTIONS</b> - используется редко<br/>
          <b>COPY, MOVE, MKCOL</b> - расширение WebDAV
        </p>

        <SubHead>HTTP коды ответа</SubHead>
        <p>
          <b>1хх</b> - информационные<br/>
          <b>2хх</b> - успешное выполнение<br/>
          <b>3хх</b> - перенаправление (запрос может быть неудачный, но документ можно найти
          по другому url, либо существуют другие версии документа)<br/>
          <b>4хх</b> - ошибка на стороне клиента<br/>
          <b>5хх</b> - ошибка на стороне сервера<br/>
        </p>
        <p>
          <b>200</b> - Ок<br/>
          <b>204</b> - No connect<br/>
          <b>301</b> - файл переместили в другое место, перенапрвляет<br/>
          <b>302</b> - то же, что 301, только не кешируется (временно переместили)<br/>
          <b>304</b> - документ не изменился, используем кэш<br/>
          <b>400</b> - Bad request - неправильный синтаксис запроса<br/>
          <b>401</b> - Unauthorized - требуется авторизация<br/>
          <b>403</b> - Forbidden - нет доступа (обычно в паре с 401) или логин/пароль не подошел<br/>
          <b>404</b> - документ не найден (обычно url неправильный)<br/>
          <b>500</b> - ошибка сервера (неожиданная, необработанное исключение например)<br/>
          <b>502</b> - Bad gateway - проксируемый ответ с ошибкой<br/>
          <b>504</b> - проксируемый сервер не отвечает<br/>
        </p>
        <Important>
          Проксировать - значит передать запрос к другому веб серверу
        </Important>

        <SubHead>HTTP заголовки</SubHead>
        <p>
          С помощью них устанавливаются вспе опции протокола.
        </p>
        <p>
          <b>Content-Type</b> - MIME тип документа<br/>
          <b>Content-Length</b> - длина сообщения<br/>
        </p>




      </div>
    );
  }
}

export default ApiPage;